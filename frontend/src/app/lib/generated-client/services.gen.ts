// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ReadAllNodesApiStudioPosetNodesGetResponse, CreateNodeApiStudioPosetNodesPostData, CreateNodeApiStudioPosetNodesPostResponse, ReadNodeApiStudioPosetNodesNodeIdGetData, ReadNodeApiStudioPosetNodesNodeIdGetResponse, UpdateNodeApiStudioPosetNodesNodeIdPutData, UpdateNodeApiStudioPosetNodesNodeIdPutResponse, DeleteNodeApiStudioPosetNodesNodeIdDeleteData, DeleteNodeApiStudioPosetNodesNodeIdDeleteResponse, ReadNodeChildrenApiStudioPosetNodesNodeIdChildrenGetData, ReadNodeChildrenApiStudioPosetNodesNodeIdChildrenGetResponse, ReadNodeParentsApiStudioPosetNodesNodeIdParentsGetData, ReadNodeParentsApiStudioPosetNodesNodeIdParentsGetResponse, ReadAllEdgesApiStudioPosetEdgesGetResponse, CreateEdgeApiStudioPosetEdgesPostData, CreateEdgeApiStudioPosetEdgesPostResponse, ReadEdgeApiStudioPosetEdgesEdgeIdGetData, ReadEdgeApiStudioPosetEdgesEdgeIdGetResponse, UpdateEdgeApiStudioPosetEdgesEdgeIdPutData, UpdateEdgeApiStudioPosetEdgesEdgeIdPutResponse, DeleteEdgeApiStudioPosetEdgesEdgeIdDeleteData, DeleteEdgeApiStudioPosetEdgesEdgeIdDeleteResponse, ReadAllProjectsApiStudioProjectsGetResponse, CreateProjectApiStudioProjectsPostData, CreateProjectApiStudioProjectsPostResponse, ReadProjectApiStudioProjectsProjectIdGetData, ReadProjectApiStudioProjectsProjectIdGetResponse, UpdateProjectApiStudioProjectsProjectIdPutData, UpdateProjectApiStudioProjectsProjectIdPutResponse, DeleteProjectApiStudioProjectsProjectIdDeleteData, DeleteProjectApiStudioProjectsProjectIdDeleteResponse, CreateChatChatCreateConfidantIdGetData, CreateChatChatCreateConfidantIdGetResponse, GetChatChatChatIdGetData, GetChatChatChatIdGetResponse, SendChatPostData, SendChatPostResponse } from './types.gen';

/**
 * Read All Nodes
 * @returns Node Successful Response
 * @throws ApiError
 */
export const readAllNodesApiStudioPosetNodesGet = (): CancelablePromise<ReadAllNodesApiStudioPosetNodesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/nodes/'
}); };

/**
 * Create Node
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Node Successful Response
 * @throws ApiError
 */
export const createNodeApiStudioPosetNodesPost = (data: CreateNodeApiStudioPosetNodesPostData): CancelablePromise<CreateNodeApiStudioPosetNodesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/studio/poset/nodes/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Node
 * @param data The data for the request.
 * @param data.nodeId
 * @returns Node Successful Response
 * @throws ApiError
 */
export const readNodeApiStudioPosetNodesNodeIdGet = (data: ReadNodeApiStudioPosetNodesNodeIdGetData): CancelablePromise<ReadNodeApiStudioPosetNodesNodeIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/nodes/{node_id}',
    path: {
        node_id: data.nodeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Node
 * @param data The data for the request.
 * @param data.nodeId
 * @param data.requestBody
 * @returns Node Successful Response
 * @throws ApiError
 */
export const updateNodeApiStudioPosetNodesNodeIdPut = (data: UpdateNodeApiStudioPosetNodesNodeIdPutData): CancelablePromise<UpdateNodeApiStudioPosetNodesNodeIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/studio/poset/nodes/{node_id}',
    path: {
        node_id: data.nodeId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Node
 * @param data The data for the request.
 * @param data.nodeId
 * @returns number Successful Response
 * @throws ApiError
 */
export const deleteNodeApiStudioPosetNodesNodeIdDelete = (data: DeleteNodeApiStudioPosetNodesNodeIdDeleteData): CancelablePromise<DeleteNodeApiStudioPosetNodesNodeIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/studio/poset/nodes/{node_id}',
    path: {
        node_id: data.nodeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Node Children
 * @param data The data for the request.
 * @param data.nodeId
 * @returns Node Successful Response
 * @throws ApiError
 */
export const readNodeChildrenApiStudioPosetNodesNodeIdChildrenGet = (data: ReadNodeChildrenApiStudioPosetNodesNodeIdChildrenGetData): CancelablePromise<ReadNodeChildrenApiStudioPosetNodesNodeIdChildrenGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/nodes/{node_id}/children',
    path: {
        node_id: data.nodeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Node Parents
 * @param data The data for the request.
 * @param data.nodeId
 * @returns Node Successful Response
 * @throws ApiError
 */
export const readNodeParentsApiStudioPosetNodesNodeIdParentsGet = (data: ReadNodeParentsApiStudioPosetNodesNodeIdParentsGetData): CancelablePromise<ReadNodeParentsApiStudioPosetNodesNodeIdParentsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/nodes/{node_id}/parents',
    path: {
        node_id: data.nodeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read All Edges
 * @returns Edge Successful Response
 * @throws ApiError
 */
export const readAllEdgesApiStudioPosetEdgesGet = (): CancelablePromise<ReadAllEdgesApiStudioPosetEdgesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/edges/'
}); };

/**
 * Create Edge
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Edge Successful Response
 * @throws ApiError
 */
export const createEdgeApiStudioPosetEdgesPost = (data: CreateEdgeApiStudioPosetEdgesPostData): CancelablePromise<CreateEdgeApiStudioPosetEdgesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/studio/poset/edges/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Edge
 * @param data The data for the request.
 * @param data.edgeId
 * @returns Edge Successful Response
 * @throws ApiError
 */
export const readEdgeApiStudioPosetEdgesEdgeIdGet = (data: ReadEdgeApiStudioPosetEdgesEdgeIdGetData): CancelablePromise<ReadEdgeApiStudioPosetEdgesEdgeIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/poset/edges/{edge_id}',
    path: {
        edge_id: data.edgeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Edge
 * @param data The data for the request.
 * @param data.edgeId
 * @param data.requestBody
 * @returns Edge Successful Response
 * @throws ApiError
 */
export const updateEdgeApiStudioPosetEdgesEdgeIdPut = (data: UpdateEdgeApiStudioPosetEdgesEdgeIdPutData): CancelablePromise<UpdateEdgeApiStudioPosetEdgesEdgeIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/studio/poset/edges/{edge_id}',
    path: {
        edge_id: data.edgeId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Edge
 * @param data The data for the request.
 * @param data.edgeId
 * @returns number Successful Response
 * @throws ApiError
 */
export const deleteEdgeApiStudioPosetEdgesEdgeIdDelete = (data: DeleteEdgeApiStudioPosetEdgesEdgeIdDeleteData): CancelablePromise<DeleteEdgeApiStudioPosetEdgesEdgeIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/studio/poset/edges/{edge_id}',
    path: {
        edge_id: data.edgeId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read All Projects
 * @returns Project Successful Response
 * @throws ApiError
 */
export const readAllProjectsApiStudioProjectsGet = (): CancelablePromise<ReadAllProjectsApiStudioProjectsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/projects/'
}); };

/**
 * Create Project
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Project Successful Response
 * @throws ApiError
 */
export const createProjectApiStudioProjectsPost = (data: CreateProjectApiStudioProjectsPostData): CancelablePromise<CreateProjectApiStudioProjectsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/studio/projects/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Project
 * @param data The data for the request.
 * @param data.projectId
 * @returns Project Successful Response
 * @throws ApiError
 */
export const readProjectApiStudioProjectsProjectIdGet = (data: ReadProjectApiStudioProjectsProjectIdGetData): CancelablePromise<ReadProjectApiStudioProjectsProjectIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/studio/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.requestBody
 * @returns Project Successful Response
 * @throws ApiError
 */
export const updateProjectApiStudioProjectsProjectIdPut = (data: UpdateProjectApiStudioProjectsProjectIdPutData): CancelablePromise<UpdateProjectApiStudioProjectsProjectIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/studio/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Project
 * @param data The data for the request.
 * @param data.projectId
 * @returns number Successful Response
 * @throws ApiError
 */
export const deleteProjectApiStudioProjectsProjectIdDelete = (data: DeleteProjectApiStudioProjectsProjectIdDeleteData): CancelablePromise<DeleteProjectApiStudioProjectsProjectIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/studio/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Chat
 * @param data The data for the request.
 * @param data.confidantId
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const createChatChatCreateConfidantIdGet = (data: CreateChatChatCreateConfidantIdGetData): CancelablePromise<CreateChatChatCreateConfidantIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/chat/create/{confidant_id}',
    path: {
        confidant_id: data.confidantId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Chat
 * @param data The data for the request.
 * @param data.chatId
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const getChatChatChatIdGet = (data: GetChatChatChatIdGetData): CancelablePromise<GetChatChatChatIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/chat/{chat_id}',
    path: {
        chat_id: data.chatId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Send
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const sendChatPost = (data: SendChatPostData): CancelablePromise<SendChatPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/chat/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };